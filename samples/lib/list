
import: nat (add);

map f x =
  case x of {
    C a x -> C (f a) (map f x);
    N -> N;
  };

filter p x =
  case x of {
    C a x -> case (p a) of { T -> C a (filter p x); F -> filter p x };
    N -> N;
  };

append x y = 
  case x of {
    C a x -> C a (append x y);
    N -> y;
  };

cycle x = append x (cycle x);

concat x =
  case x of {
    C a x -> append a (concat x);
    N -> N;
  };

iterate f a = C a (iterate f (f a));

length x =
  case x of {
    C a x -> S (length x);
    N -> Z;
  };

take n xs =
  case n of {
    Z -> N;
    S m -> case xs of {
      N -> N;
      C a x -> C a (take m x);
    };
  };

drop n xs =
  case n of {
    Z -> xs;
    S m -> case xs of {
      N -> N;
      C a x -> drop m x;
    };
  };

sum x =
  case x of {
    C a x -> add a (sum x);
    N -> Z;
  };

idList x =
  case x of {
    C a x -> C a (idList x);
    N -> N;
  };

seqList x y =
  case x of {
    C a x -> seqList x y;
    N -> y;
  };

intersperse a xs =
  case xs of {
    N -> N;
    C x xs -> 
      case xs of {
        N -> C x N;
        C d1 d2 -> C x (C a (intersperse a xs));
      };
  };

qrev x = qrevTo x N;

qrevTo x y =
  case x of {
    C a x -> qrevTo x (C a y);
    N -> y;
  };

nrev x =
  case x of {
    C a x -> append (nrev x) (C a N);
    N -> N;
  };

nrevTo x y =
  case x of {
    C a x -> append (nrev x) (C a y);
    N -> y;
  };

foldList f a x =
  case x of {
    C b x -> f b (foldList f a x);
    N -> a;
  };

fold1 f x =
  case x of {
    N -> _|_;
    C a x -> foldList f a x;
  };

sequence xs = case xs of {
  N -> C N N;
  C ys xs -> concat (map (\x -> map (\y -> C y x) ys) (sequence xs))
};

transpose xs = case xs of {
  N -> N;
  C ys xs -> myzip ys (transpose xs)
};

myzip ys xs = case ys of {
  N -> xs;
  C y ys -> case xs of {
	N -> C (C y N) (myzip ys N);
	C x xs -> C (C y x) (myzip ys xs);
  };
};


